trigger:
  branches:
    include:
      - main

pool:
  name: Default  # あなたの Self-hosted Agent の名前
  demands:
    - terraform



stages:
  - stage: TerraformApply
    jobs:
      - job: Apply
        steps:
          - script: |
              echo "##[group]Step 1: Git clone"
              git clone https://github.com/kawaiTakeru/terraform-subscription-test.git
              cd terraform-subscription-test/terraform
              echo "##[endgroup]"

              echo "##[group]Step 2: terraform init"
              terraform init
              echo "##[endgroup]"

              echo "##[group]Step 3: terraform plan"
              terraform plan
              echo "##[endgroup]"

              echo "##[group]Step 4: terraform apply"
              terraform apply -auto-approve
              echo "##[endgroup]"

              echo "##[group]Step 5: 完了 ✅"
              echo "✅ サブスクリプション作成成功 ✅"
              echo "##[endgroup]"
            displayName: 'Terraform Apply (Subscription Create)'

          - task: PowerShell@2
            displayName: 'Notify Slack (Success)'
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                $webhookUrl = "${env:SLACK_WEBHOOK_URL}"
                $payload = @{ text = "✅ Terraform apply 成功 ✅" } | ConvertTo-Json
                Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType 'application/json' -Body $payload

          - task: PowerShell@2
            displayName: 'Notify Slack (Failure)'
            condition: failed()
            inputs:
              targetType: 'inline'
              script: |
                $webhookUrl = "${env:SLACK_WEBHOOK_URL}"
                $payload = @{ text = "❌ Terraform apply 失敗 ❌" } | ConvertTo-Json
                Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType 'application/json' -Body $payload
